# -*- coding: utf-8 -*-
"""naxonlab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nRrplyxdo4ZIRf97s17vvu5cRH1DryMI
"""

#
#  NAXON LABS - Websocket Sample for Naxon Explorer
#  2023 - www.naxonlabs.com
#

import websocket
import json
import time
import socket



# Define the WebSocket connection URL and token
ws_url = 'wss://naxonlabs.com/api/v1/action_cable?token=eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjozMDQsImV4cCI6MTczMDI5MDAwNH0.75SAY_0TNH8oAgF3Ip6RBMjl1Mkp2jWND0_dJTwh130'
# Define the channel to subscribe to
channel = {"command":"subscribe","identifier":"{\"channel\":\"RecordingsChannel\",\"room\":\"RecordingsRoom\",\"session_id\":\"1976\"}"}
count = 0
play = {"command":"message","identifier":"{\"channel\":\"RecordingsChannel\",\"room\":\"RecordingsRoom\",\"session_id\":\"1976\"}","data":"{\"change_status\":\"start_recording\",\"action\":\"change_recording_status\"}"}
pause =  {"command":"message","identifier":"{\"channel\":\"RecordingsChannel\",\"room\":\"RecordingsRoom\",\"session_id\":\"1976\"}","data":"{\"change_status\":\"stop_recording\",\"action\":\"change_recording_status\"}"}
end =  {"command":"message","identifier":"{\"channel\":\"RecordingsChannel\",\"room\":\"RecordingsRoom\",\"session_id\":\"1976\"}","data":"{\"change_status\":\"end_recording\",\"action\":\"change_recording_status\"}"}

HOST = 'localhost'
PORT = 40000

# def send_to_socket_server(data):
#     with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
#         s.connect((HOST, PORT))
#         print(data)
#         s.sendall(json.dumps(data).encode())

def on_message(ws, message):
    # Parse incoming message as JSON
    data = json.loads(message)
    # Handle the message
    if data['type'] == 'welcome':
        print('Thank you')
    else:
        print('-'*20)
        print(data)
        print(type(data['message']))
        print('-'*20)
        
        if 'identifier' in data and data['identifier'] == channel:
            if 'message' in data and 'status' in data['message']:
                print('Recording status changed to', data['message']['status'])
                # send_to_socket_server(data)
            else:
                print('Unknown message received:', message)
                pass

        elif data['type'] == 'ping':
            # Respond to the server's ping message
            print('ping-pong')
            ws.send(json.dumps({'type': 'pong'}))
        else:
                print('Unknown message received:', message)
    

        
        
            

def on_error(ws, error):
    print('WebSocket error:', error)

def on_close(ws):
    print('WebSocket connection closed')

def on_open(ws):
    # Subscribe to the specified channel
    ws.send(json.dumps(channel))
    ws.send(json.dumps(play))


websocket.enableTrace(True)
ws = websocket.WebSocketApp(ws_url,
                            on_message=on_message,
                            on_error=on_error,
                            on_close=on_close)
print(channel)
ws.on_open = on_open
ws.run_forever()
ws.close()
